Проект по созданию магазина на Django + Angular

1. pip install -r requirements.txt
2. run server:
cd backend
./bin/run  # chmod +x ./bin/run


3. для загрузки данных их excel в БД ./manage.py load_from_excel

4. Swagger - для создания API
https://github.com/axnsan12/drf-yasg

## prj/urls.py

from rest_framework import permissions
from drf_yasg.views import get_schema_view
from drf_yasg import openapi

schema_view = get_schema_view(
    openapi.Info(
        title="Delivery API",
        default_version='v1',
        description='''
            Documentation `ReDoc` view can be found [here](/doc)''',
        contact=openapi.Contact(email="do6rolet@gmail.com"),
        license=openapi.License(name="BSD License"),
    ),
    public=True,
    permission_classes=(permissions.AllowAny,),
)


5. Создание Сериализаторов:

# регистрация общих(generic) путей
from rest_framework import routers
from market.views.category import CategoryViewSet  # - generic
router = routers.DefaultRouter()
router.register(r'category', CategoryViewSet)



urlpatterns = [
    path('admin/', admin.site.urls),
    path('v1/', include([
        path('generic/', include(router.urls)),
        path('market/', include('market.urls'))  # - custom url

    ])),


# Custom  - market.urls

from django.urls import path, include
from market.views.auth import AuthView, hello


urlpatterns = [
    path('userlogin', AuthView.as_view()),
    path('hello/', hello),

]


6. Создание ViewSets
https://www.django-rest-framework.org/api-guide/viewsets/

7. Channels - накладывает web-socket протокол на http для взаимодействия "клиент - сервер"  и передачи сообщения между
ними в двухнаправленном потоке
https://channels.readthedocs.io/en/stable/

8. Настройка вывода продуктов views/product.py

9. Постраничная навигация(DRF pagination), settings.py
https://www.django-rest-framework.org/api-guide/pagination/

10. bs4, requests

11. Добавление images в таблицу Category:
#markte/models.py:

class Category(models.Model):
    name = models.CharField(max_length=250, default='')
    image = models.ImageField(upload_to='category', null=True, blank=True)
    def __str__(self):
        return self.name

- #settings.py:
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')
MEDIA_URL = '/media/'

- # mkdir prj/media

- #prj/urls.py

from django.conf import settings
from django.conf.urls.static import static

urlpatterns += [] + static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)

# Для вывода image в admin панели необходимо:

- #models.py
from django.utils.safestring import mark_safe

class Category(models.Model):
    name = models.CharField(max_length=250, default='')
    image = models.ImageField(upload_to='category', null=True, blank=True)
    def __str__(self):
        return self.name
    @property
    def image_tag(self):
        return mark_safe('<img src="%$" />' % self.image.url)

- #admin.py
@admin.register(Category)
class CategoryAdmin(admin.ModelAdmin):
    list_display = ['name', 'image_tag']

12 Использование bs4
- Создаем новую команду в market/management/commands/load_fm_inet.py

13 Обрезка фотографий и приведение их к общему виду:
pip install :
django-image-cropping
easy-thumbnails

#settings.py
INSTALLED_APPS = [
    ...
    'image_cropping',
    'easy_thumbnails',
]

#models.py:

from image_cropping.fields import ImageRatioField, ImageCropField

class Product(models.Model):
    ...
    image = ImageCropField(upload_to='product', null=True, blank=True)
    cropping = ImageRatioField('image', '100x100')  # поле для хранения размера обрезки изображения

    @property
    def get_small_image(self):
        return mark_safe('<img src="%s" />' % get_thumbnailer(self.image).get_thumbnail({
            'size': (100, 100),
            'box': self.cropping,
            'crop': 'smart',
        }).url)
#admin.py
@admin.register(Product)
class ProductAdmin(admin.ModelAdmin):
    list_display = ['name', 'category', 'get_small_image']

14. для запуска импорта использовать ./manage.py load_fm_inet

15. Добавление фильтрации:
https://django-filter.readthedocs.io/en/stable/guide/rest_framework.html
#settings.py

INSTALLED_APPS = [
    ...
    'rest_framework',
    'django_filters',

REST_FRAMEWORK = {
    'DEFAULT_FILTER_BACKENDS': (
        'django_filters.rest_framework.DjangoFilterBackend',
        ...
    ),
}


#filters.py
from django_filters import rest_framework as filters
from market.models import Product


class ProductFilter(filters.FilterSet):
    category = filters.NumberFilter()
    subcategory = filters.NumberFilter()
    searchkey = filters.CharFilter(field_name='name', lookup_expr='icontains')

    class Meta:
        model = Product
        fields = ['category', 'subcategory', 'searchkey']


#views/product.py:

class ProductSerializer(serializers.ModelSerializer):
    category = CategorySerializer()
    class Meta:
        model = Product
        fields = ['id', 'name', 'category', 'subcategory', 'get_small_image_url']

class ProductListView(ListAPIView):
    queryset = Product.objects.all()
    serializer_class = ProductSerializer
    filterset_class = ProductFilter

    def get(self, request, *args, **kwargs):
        return self.list(request, *args, **kwargs)

